version: '3.7'

services:
  nginx:
    image: transcendence:nginx_image
    container_name: nginx-container
    build: ./infrastructure/nginx/
    ports:
      - 443:443
      - 80:80
    volumes:
      - vault_data:/vault
    networks:
      - transcendence_net
    depends_on:
      - frontend
      - user_management
      - chat
      - game
      - tournaments
      - redis
    restart: always

  frontend:
    image: transcendence:frontend_image
    container_name: frontend-container
    build: ./infrastructure/frontend/
    volumes:
      - frontend:/app
      - vault_data:/vault
    networks:
      - transcendence_net
    restart: always



  user_management:
    image: transcendence:user_management_image
    container_name: user-management-container
    build: ./infrastructure/user_management/
    volumes:
      - user_management_data:/app
      - assets:/app/assets
      - vault_data:/vault
    networks:
      - transcendence_net
    depends_on:
      - user_management_db
      - redis
    env_file:
      - vault/.user_management_env
      - vault/.env
    restart: always

  user_management_db:
    image: transcendence:user_management_db_image
    container_name: user-management-db-container
    build: ./infrastructure/user_management_db/
    volumes:
      - user_management_db_data:/var/lib/postgresql/data
    networks:
      - transcendence_net
    env_file:
      - vault/.user_management_env
    restart: always



  chat:
    image: transcendence:chat_image
    container_name: chat-container
    build: ./infrastructure/chat/
    volumes:
      - chat_data:/app
      - assets:/app/assets
    networks:
      - transcendence_net
    depends_on:
      - chat_db
      - redis
    env_file:
      - vault/.chat_env
      - vault/.env
    restart: always

  chat_db:
    image: transcendence:chat_db_image
    container_name: chat-db-container
    build: ./infrastructure/chat_db/
    volumes:
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - transcendence_net
    env_file:
      - vault/.chat_env
    restart: always



  game:
    image: transcendence:game_image
    container_name: game-container
    build: ./infrastructure/game/
    volumes:
      - game_data:/app
      - assets:/app/assets
    networks:
      - transcendence_net
    depends_on:
      - game_db
      - redis
    env_file:
      - vault/.game_env
      - vault/.env
    restart: always

  game_db:
    image: transcendence:game_db_image
    container_name: game-db-container
    build: ./infrastructure/game_db/
    volumes:
      - game_db_data:/var/lib/postgresql/data
    networks:
      - transcendence_net
    env_file:
      - vault/.game_env
    restart: always



  tournaments:
    image: transcendence:tournaments_image
    container_name: tournaments-container
    build: ./infrastructure/tournaments/
    volumes:
      - tournaments_data:/app
      - assets:/app/assets
    networks:
      - transcendence_net
    depends_on:
      - tournaments_db
      - redis
    env_file:
      - vault/.tournaments_env
      - vault/.env
    restart: always

  tournaments_db:
    image: transcendence:tournaments_db_image
    container_name: tournaments-db-container
    build: ./infrastructure/tournaments_db/
    volumes:
      - tournaments_db_data:/var/lib/postgresql/data
    networks:
      - transcendence_net
    env_file:
      - vault/.tournaments_env
    restart: always




  redis:
    image: transcendence:redis_image
    container_name: redis-container
    build: ./infrastructure/redis/
    volumes:
      - redis_data:/data
    networks:
      - transcendence_net
    env_file:
      - vault/.env
    restart: always

  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus-container
    volumes:
      - ${COMPOSE_PROJECT_PATH}/infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${COMPOSE_PROJECT_PATH}/infrastructure/prometheus/rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    networks:
      - transcendence_net
    restart: always


  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager-container
    volumes:
      - ${COMPOSE_PROJECT_PATH}/infrastructure/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ${COMPOSE_PROJECT_PATH}/infrastructure/prometheus/entrypoint.sh:/entrypoint.sh
      - alertmanager_data:/alertmanager
    env_file:
      - vault/.user_management_env
    networks:
      - transcendence_net
    restart: always
    entrypoint: ["/bin/sh", "/entrypoint.sh"]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor-container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /tmp/:/tmp/:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    depends_on:
      - prometheus
      - nginx
      - frontend
    networks:
      - transcendence_net
    restart: always

  redis-exporter:
    image: oliver006/redis_exporter:v1.66.0-alpine
    container_name: redis-exporter-container
    environment:
      - REDIS_ADDR=redis_container:6379
    networks:
      - transcendence_net
    depends_on:
      - redis
    restart: always

  postgres-exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres-exporter
    env_file:
      - vault/.postgres_exporter_env
    networks:
      - transcendence_net
    expose:
      - 9187
    depends_on:
      - user_management_db
      - chat_db
      - game_db
      - tournaments_db
    restart: always


  grafana:
    image: grafana/grafana:11.3.1
    container_name: grafana-container
    networks:
      - transcendence_net
    depends_on:
      - prometheus
    env_file:
      - vault/.grafana_env
    volumes:
      - ${COMPOSE_PROJECT_PATH}/infrastructure/grafana/provisioning:/etc/grafana/provisioning
    restart: always

volumes:
  frontend:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/frontend/
      o: bind
  
  assets:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/frontend/assets/
      o: bind



  vault_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/vault
      o: bind



  user_management_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/backend/user_management_service/
      o: bind

  user_management_db_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/user_management_db_data
      o: bind
  


  chat_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/backend/chat_service/
      o: bind

  chat_db_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/chat_db_data
      o: bind



  game_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/backend/game_service/
      o: bind

  game_db_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/game_db_data
      o: bind



  tournaments_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/backend/tournaments_service/
      o: bind

  tournaments_db_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/tournaments_db_data
      o: bind



  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/redis_data
      o: bind



  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/prometheus_data
      o: bind

  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      device: ${COMPOSE_PROJECT_PATH}/volumes/db_data/alertmanager_data
      o: bind


networks:
  transcendence_net:
    driver: bridge
